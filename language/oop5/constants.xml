<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7ddc30e0d2087d75b8f50da40668f4e422c6a4c5 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Константы классов</title>
 <para>
  Разрешается объявлять <link linkend="language.constants">константы</link>,
  которые останутся неизменными и неизменяемыми, отдельно для каждого класса.
  По умолчанию область видимости констант — <literal>public</literal>.
 </para>
 <note>
  <para>
   Константы класса разрешается переопределять дочерним классом.
   Начиная с PHP 8.1.0 константы класса нельзя переопределить дочерним классом,
   если класс определили как окончательный (<link linkend="language.oop5.final">final</link>).
  </para>
 </note>
 <para>
  Интерфейсам также разрешается содержать константы. Примеры даёт
  документация <link linkend="language.oop5.interfaces">по интерфейсам</link>.
 </para>
 <para>
  К классу можно обратиться через переменную.
  Ключевые слова нельзя указывать как значения переменной
  (например, <literal>self</literal>, <literal>parent</literal>
  и <literal>static</literal>).
 </para>
 <para>
  Обратите внимание, что константы класса задаются один раз для всего класса,
  а не отдельно для каждого созданного объекта этого класса.
 </para>
 <example>
  <title>Объявление и использование константы</title>
  <programlisting role="php">
<![CDATA[
<?php

class MyClass
{
    const CONSTANT = 'значение константы';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n";

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n";

?>
]]>
   </programlisting>
 </example>
 <para>
  Специальная константа <constant>::class</constant> на этапе компиляции
  разрешает имена классов в абсолютные. Это полезно при работе в классах
  с пространством имён.
 </para>
 <example>
  <title>Пример поведения константы ::class в классе с пространством имён</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
   </programlisting>
 </example>
 <example>
  <title>Пример константного выражения класса</title>
  <programlisting role="php">
<![CDATA[
<?php

const ONE = 1;

class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Значение константы THREE - ' . self::THREE;
}

?>
]]>
   </programlisting>
 </example>

 <example>
  <title>Модификаторы видимости констант класса начиная с PHP 7.1.0</title>
  <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public const BAR = 'bar';
    private const BAZ = 'baz';
}

echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;

?>
]]>
   </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Начиная с PHP 7.1.0 для констант класса разрешается указывать модификаторы области видимости.
  </para>
 </note>
 <example>
  <title>Проверка вариантности видимости констант класса начиная с PHP 8.3.0</title>
  <programlisting role="php">
<![CDATA[
<?php

interface MyInterface
{
    public const VALUE = 42;
}

class MyClass implements MyInterface
{
    protected const VALUE = 42;
}

?>
]]>
  </programlisting>
  &example.outputs.83;
  <screen>
<![CDATA[
Fatal error: Access level to MyClass::VALUE must be public (as in interface MyInterface) …
]]>
  </screen>
 </example>
 <note>
  <simpara>
   Начиная с PHP 8.3.0 вариантность видимости проверяется строже.
   До этой версии видимость константы класса могла не совпадать
   с видимостью константы реализованного интерфейса.
  </simpara>
 </note>
 <example>
  <title>Синтаксис получения константы класса начиная с PHP 8.3.0</title>
  <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public const BAR = 'bar';
    private const BAZ = 'baz';
}

$name = 'BAR';
echo Foo::{$name}, PHP_EOL; // bar

?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   Начиная с PHP 8.3.0 значения констант класса разрешили получать динамически,
   через переменную.
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
